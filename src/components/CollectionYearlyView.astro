---
import type { CollectionKey } from "astro:content";
import {getCollection} from "astro:content";
interface Props {
	collectionName: CollectionKey;
}

const {collectionName} = Astro.props;
const collection = await getCollection(collectionName);
const orderedCollection = collection.sort(
	(a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf()
);
const sorted = new Map();

for (let entry of orderedCollection) {
	const {data, slug} = entry;
	const {title, publishDate} = data;
	const formattedDate = publishDate.toLocaleDateString("en-US", {
		year: "2-digit",
		month: "2-digit",
		day: "2-digit",
	});
	const href = "/" + collectionName + "/" + slug;
	const post = {title, publishDate: formattedDate, href};

	const year = publishDate.getFullYear();
	if (!sorted.get(year)) {
		sorted.set(year, []);
	}
	sorted.get(year).push(post);
}

const records = [...sorted.entries()];
---

<div class="year__blocks | inner-wrapper">
	{
		records.map(([year, posts]) => (
			<div class="year__block">
				<h2 class="text-narrow">{year}</h2>

				<ul class="posts | flow" role="list">
					{posts.map((post) => (
						<li class="post | auto-columns">
							<p class="text-narrow text-mono">{post.publishDate}</p>
							<a href={post.href}>{post.title}</a>
						</li>
					))}
				</ul>
			</div>
		))
	}
</div>

<style>
	.year__blocks {
		display: grid;
		padding-block: var(--space-l);
		row-gap: var(--space-l);
	}

	.year__block {
		align-items: baseline;
		display: grid;
		row-gap: var(--space-s);

		h2 {
			font-size: var(--size-step-2);
		}
	}

	.posts {
		--flow-space: 0.5em;
	}

	.post {
		align-items: baseline;
		justify-content: start;
	}

	.post p {
		color: var(--clr-mid);
		font-weight: 300;
	}

	.post a {
		font-size: var(--size-step-1);
	}

	.year__blocks {
		border-block-end: none;
	}

	@media (min-width: 60rem) {
		.year__blocks {
			padding-block: var(--space-xl);
		}

		.year__block {
			grid-template-columns: minmax(min-content, 1fr) 4fr;
		}

		.posts {
			grid-column: 2;
		}
	}
</style>
